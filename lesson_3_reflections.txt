When would you want to use a remote repository rather than keeping all your work local?
1) When working on a project with others.
2) When working on a project from multiple sites/computers.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
It's possible that the remote has commits or data that are not ready for review or testing.  For example, if I'm working with others on a project, they may have pushed their commits because they're traveling and want to get to it later from another site.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
A branch is a child that initiates a new line of commits, moving off a main line or history of commits.  It resides in one location.  A fork exists on git hub.  It separates the commit history into a new history.  This allows a user to make changes and commits without affecting other commit histories. A clone copies everything in a repository from one location to another.  A repository can be cloned (copied) within the same machine or from one machine to another.  It differs from a fork in that it does not record or relate to the original author of the repository.It also differs because it can be done outside of git hub, whereas a fork is something that is part of git hub. 

If git pull is the same as git fetch + git merge, why don't all pull commands create merge commits?  If merging two commits where one is the ancestor of the other (i.e., where one is reachable by the other) then there is no reason because the child has the same info as the parent.  There is no reason to make a merge commit.  In this case it is called a fast-forward merge.  A FF merge takes a label from an ancestor and moves it to the tip of the branch.  

What is the benefit of having a copy of the last known state of the remote stored locally?
If I'm collaborating and I'm going offline, I might want to know what work has been done so that I can continue working effectively.  Or even if I'm not collaborating, but going offline, I can update my local, continue working, then run git diff to see the changes.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
Without using Git (or its equivalent), we would have difficulty identifying and comparing files that have changed; comparing changes within files would be more difficult; branching would have to be done manually, by creating new files and then remembering from which version it came from. It would be very difficult to work on two "branches" simulteaneously.  Merge conflicts would not be instantly identified.  And merging them would be very tedious and error prone.  Without using GitHub, we would have to pass files back and forth.  It might even be difficult to remember who has the latest working version.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

Separate branch:  Trying something new that might not work.  Keeping a separate branch will make it easy to find a working version.  Disadvantage:  more steps/more complexity in keeping track and keeping the master up-to-date.



