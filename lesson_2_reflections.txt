What happens when you initialize a repository? Why do you need to do it?
Creates a new repository containing all files in current location.  Creates a starting point to keep track of commits.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The working directory contains all the files that can go into a repository.  The staging area is the space that allows users to control which files in the working directory are added to the repository and when they are added.  This allows users to control the initial versioning of the repository so that commits are created according to logical operations.  Commits happen in a repository, not in a staging area.

How can you use the staging area to make sure you have one commit per logical change?
After each logical change use git add to move changes to the staging area.  Then invoke git diff to double check work.  Finally invoke git commit, if change is correct.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
If I want to make an experimental change, a branch would allow me to quickly go back and forth between the master and the experiment.  Or if multiple people are working on a project, each person could have their own branch, and merge their work.

How do the diagrams help you visualize the branch structure?
The diagrams show the tree structure of the commits.  They are a map of the versions, with each commit, from the tip of the branch to the origin, showing its parent.  The diagram also helps to visualize the nodes, where a branch is initiated.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merge combines the branches back to their common origin.  If code not in the original was added, this will be added to the new master.  If the same code was modified in both branches a merge conflict will result.  The two branches are now parents of the new Master, hence the master has two arrows pointing back to each branch from whence it came.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pros:  Speed.  Less prone to error (copying and pasting wrong sections)
Cons:  If modified code is inter-related (affects functions beyond one that is modified) and it affects the modification that another person made, it might crash.  